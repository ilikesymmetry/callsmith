{"version":3,"file":"app-router.js","sourceRoot":"","sources":["app-router.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport { ApiPathNode, Method, Route, RouteState } from \"./types\";\n\ninterface ApiRoute {\n  route: string;\n  methods: string[];\n}\n\nexport function getAppRoutes() {\n  //   const apiDirectory = path.join(__dirname, \"/api\");\n  const apiDirectory = path.join(process.cwd(), \"src\", \"app\");\n  const apiRoutes = getApiRoutes(apiDirectory);\n  // console.log(\"apiRoutes\", apiRoutes);\n  const fileTree = buildFileTree(apiRoutes);\n  // console.log(\"fileTree\", fileTree);\n  return fileTree;\n}\n\nfunction getApiRoutes(directory: string, baseRoute: string = \"\"): ApiRoute[] {\n  const routes: ApiRoute[] = [];\n\n  const items = fs.readdirSync(directory);\n  for (const item of items) {\n    const fullPath = path.join(directory, item);\n    const stat = fs.statSync(fullPath);\n\n    if (stat.isDirectory()) {\n      // If it's a directory, recurse into it\n      const nestedRoutes = getApiRoutes(fullPath, path.join(baseRoute, item));\n      routes.push(...nestedRoutes);\n    } else if (stat.isFile() && (item === \"route.js\" || item === \"route.ts\")) {\n      // If it's a 'route.js' or 'route.ts' file, it's a valid API route\n      const routePath = baseRoute.replace(/\\\\/g, \"/\"); // Normalize path to use forward slashes\n      const methods = getMethods(fullPath);\n      routes.push({ route: routePath, methods });\n    }\n  }\n\n  return routes;\n}\n\nfunction getMethods(filePath: string): string[] {\n  const fileContent = fs.readFileSync(filePath, \"utf-8\");\n  const methods: string[] = [];\n\n  if (fileContent.match(/\\bexport\\b.*\\bfunction\\b.*\\bGET\\b/))\n    methods.push(\"GET\");\n  if (fileContent.match(/\\bexport\\b.*\\bfunction\\b.*\\bPOST\\b/))\n    methods.push(\"POST\");\n  if (fileContent.match(/\\bexport\\b.*\\bfunction\\b.*\\bPUT\\b/))\n    methods.push(\"PUT\");\n  if (fileContent.match(/\\bexport\\b.*\\bfunction\\b.*\\bDELETE\\b/))\n    methods.push(\"DELETE\");\n  if (fileContent.match(/\\bexport\\b.*\\bfunction\\b.*\\bPATCH\\b/))\n    methods.push(\"PATCH\");\n\n  return methods;\n}\n\nfunction buildFileTree(routes: ApiRoute[]): ApiPathNode[] {\n  const root: ApiPathNode = {\n    value: \"\",\n    type: \"dir\",\n    children: [],\n  };\n\n  routes.forEach((route) => {\n    const parts = route.route.split(\"/\").filter((part) => part.length > 0);\n\n    route.methods.forEach((method) => {\n      let currentLevel = root;\n\n      parts.forEach((part, index) => {\n        let node = currentLevel.children.find(\n          (child) => child.value === part && child.type === \"dir\"\n        );\n\n        if (!node) {\n          node = {\n            value: part,\n            type: index === parts.length - 1 ? \"file\" : \"dir\",\n            data: index === parts.length - 1 ? { method } : undefined,\n            children: [],\n          };\n          currentLevel.children.push(node);\n        } else if (node.type === \"dir\" && index === parts.length - 1) {\n          // Handle the case where we need to add a file node to an existing directory node\n          currentLevel.children.push({\n            value: part,\n            type: \"file\",\n            data: { method },\n            children: [],\n          });\n        } else if (node.type === \"file\" && index === parts.length - 1) {\n          // If the node is a file node and we're at the end of the parts, ensure multiple methods are handled\n          if (!node.data) {\n            node.data = { method };\n          } else if (node.data.method !== method) {\n            currentLevel.children.push({\n              value: part,\n              type: \"file\",\n              data: { method },\n              children: [],\n            });\n          }\n        }\n\n        currentLevel = node;\n      });\n    });\n  });\n\n  return root.children;\n}\n"]}