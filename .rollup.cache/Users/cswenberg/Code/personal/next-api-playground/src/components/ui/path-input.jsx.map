{"version":3,"file":"path-input.jsx","sourceRoot":"","sources":["path-input.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAI/B,8BAA8B;AAC9B,2DAA2D;AAE3D,oEAAoE;AACpE,8CAA8C;AAC9C,eAAe;AACf,eAAe;AACf,sBAAsB;AACtB,yBAAyB;AACzB,saAAsa;AACta,sBAAsB;AACtB,aAAa;AACb,oBAAoB;AACpB,qBAAqB;AACrB,WAAW;AACX,SAAS;AACT,MAAM;AACN,KAAK;AACL,uCAAuC;AAEvC,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAe,MAAM,OAAO,CAAC;AACjE,OAAO,0BAA0B,CAAC;AAMlC,IAAM,SAAS,GAAkC,UAAC,EAGjD;IAFC,IAAA,iBAAc,EAAd,SAAS,mBAAG,EAAE,KAAA,EACX,KAAK,cAFwC,aAGjD,CADS;IAEF,IAAA,KAA8B,QAAQ,CAAC,EAAE,CAAC,EAAzC,UAAU,QAAA,EAAE,aAAa,QAAgB,CAAC;IAC3C,IAAA,KAA8B,QAAQ,CAAC,CAAC,CAAC,EAAxC,UAAU,QAAA,EAAE,aAAa,QAAe,CAAC;IAChD,IAAM,cAAc,GAAG,MAAM,CAAmB,IAAI,CAAC,CAAC;IAEtD,SAAS,CAAC;QACR,IAAI,cAAc,CAAC,OAAO,EAAE,CAAC;YAC3B,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACpD,CAAC;IACH,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,OAAO,CACL,CAAC,GAAG,CAAC,SAAS,CAAC,2BAA2B,CACxC;MAAA,CAAC,KAAK,CACJ,GAAG,CAAC,CAAC,cAAc,CAAC,CACpB,KAAK,CAAC,CAAC,UAAU,CAAC,CAClB,QAAQ,CACR,SAAS,CAAC,yDAAyD,CACnE,IAAI,KAAK,CAAC,EAEZ;MAAA,CAAC,KAAK,CACJ,KAAK,CAAC,CAAC,UAAU,CAAC,CAClB,QAAQ,CAAC,CAAC,UAAC,CAAC,IAAK,OAAA,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAA7B,CAA6B,CAAC,CAC/C,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,UAAG,UAAU,OAAI,EAAE,CAAC,CACpC,SAAS,CAAC,CAAC,6CAAsC,SAAS,CAAE,CAAC,CAC7D,IAAI,KAAK,CAAC,EAEd;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,OAAO,EAAE,SAAS,EAAE,CAAC","sourcesContent":["import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\n// export interface InputProps\n//   extends React.InputHTMLAttributes<HTMLInputElement> {}\n\n// const PathInput = React.forwardRef<HTMLInputElement, InputProps>(\n//   ({ className, type, ...props }, ref) => {\n//     return (\n//       <input\n//         type={type}\n//         className={cn(\n//           \"flex rounded-md w-fit px-1 bg-neutral-100 dark:bg-neutral-900 ring-offset-white file:border-0 file:text-sm file:font-medium placeholder:text-neutral-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:ring-offset-neutral-950 dark:placeholder:text-neutral-600 dark:focus-visible:ring-neutral-300\",\n//           className\n//         )}\n//         ref={ref}\n//         {...props}\n//       />\n//     );\n//   }\n// );\n// PathInput.displayName = \"PathInput\";\n\nimport { useState, useRef, useEffect, ChangeEvent } from \"react\";\nimport \"tailwindcss/tailwind.css\";\n\ninterface PathInputInputProps {\n  className?: string;\n}\n\nconst PathInput: React.FC<PathInputInputProps> = ({\n  className = \"\",\n  ...props\n}) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [inputWidth, setInputWidth] = useState(1);\n  const hiddenInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (hiddenInputRef.current) {\n      setInputWidth(hiddenInputRef.current.scrollWidth);\n    }\n  }, [inputValue]);\n\n  return (\n    <div className=\"inline-block relative p-1\">\n      <input\n        ref={hiddenInputRef}\n        value={inputValue}\n        readOnly\n        className=\"absolute top-0 left-0 invisible h-0 overflow-hidden p-1\"\n        {...props}\n      />\n      <input\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n        style={{ width: `${inputWidth}px` }}\n        className={`p-1 box-border dark:bg-neutral-900 ${className}`}\n        {...props}\n      />\n    </div>\n  );\n};\n\nexport { PathInput };\n"]}