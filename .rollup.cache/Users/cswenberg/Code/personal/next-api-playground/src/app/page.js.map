{"version":3,"file":"page.js","sourceRoot":"","sources":["page.tsx"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAKhD,mCAAmC;AACnC,2DAA2D;AAC3D,kCAAkC;AAClC,6CAA6C;AAE7C,gCAAgC;AAChC,mDAAmD;AACnD,mDAAmD;AACnD,6FAA6F;AAC7F,iBAAiB;AACjB,kCAAkC;AAClC,UAAU;AACV,UAAU;AAEV,sBAAsB;AACtB,OAAO;AAEP,wEAAwE;AACxE,6CAA6C;AAC7C,gCAAgC;AAChC,yDAAyD;AACzD,8CAA8C;AAC9C,+CAA+C;AAE/C,0BAA0B;AAC1B,IAAI;AAEJ,sCAAsC;AACtC,8DAA8D;AAC9D,+DAA+D;AAC/D,qBAAqB;AACrB,eAAe;AACf,sBAAsB;AACtB,SAAS;AACT,kCAAkC;AAClC,6CAA6C;AAC7C,4CAA4C;AAC5C,mCAAmC;AACnC,8CAA8C;AAC9C,YAAY;AACZ,QAAQ;AACR,OAAO;AAEP,wEAAwE;AACxE,6DAA6D;AAC7D,kCAAkC;AAClC,yCAAyC;AACzC,IAAI;AAEJ,MAAM,CAAC,OAAO,UAAU,IAAI;IAC1B,+BAA+B;IAC/B,OAAO,KAAC,SAAS,IAAC,KAAK,EAAE,YAAY,EAAE,GAAI,CAAC;AAC9C,CAAC","sourcesContent":["import { Callsmith } from \"@/components/Callsmith\";\nimport { getAppRoutes } from \"@/lib/app-router\";\nimport { ApiPathNode } from \"@/lib/types\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// export function getApiRoutes() {\n//   const readDirectory = (dirPath: string): string[] => {\n//     let results: string[] = [];\n//     const files = fs.readdirSync(dirPath);\n\n//     files.forEach((file) => {\n//       const fullPath = path.join(dirPath, file);\n//       if (fs.statSync(fullPath).isDirectory()) {\n//         results = results.concat(readDirectory(fullPath)); // Recursively read directories\n//       } else {\n//         results.push(fullPath);\n//       }\n//     });\n\n//     return results;\n//   };\n\n//   const prefixPath = path.join(process.cwd(), \"src\", \"pages\", \"api\");\n//   const files = readDirectory(prefixPath);\n//   const cleanedRoutes = files\n//     .map((file) => file.replace(prefixPath + \"/\", \"\"))\n//     .filter((file) => file.endsWith(\".ts\"))\n//     .map((file) => file.replace(\".ts\", \"\"));\n\n//   return cleanedRoutes;\n// }\n\n// export function getApiPathNodes() {\n//   const traverse = (path: string, parent: ApiPathNode) => {\n//     const value = path.split(\"/\").pop()!.replace(\".ts\", \"\");\n//     const node = {\n//       value,\n//       children: [],\n//     };\n//     parent.children.push(node);\n//     if (fs.statSync(path).isDirectory()) {\n//       const files = fs.readdirSync(path);\n//       files.forEach((value) => {\n//         traverse(`${path}/${value}`, node);\n//       });\n//     }\n//   };\n\n//   const prefixPath = path.join(process.cwd(), \"src\", \"pages\", \"api\");\n//   const parent: ApiPathNode = { value: \"\", children: [] };\n//   traverse(prefixPath, parent);\n//   return parent.children[0]!.children;\n// }\n\nexport default function Home() {\n  // console.log(getAppRoutes());\n  return <Callsmith nodes={getAppRoutes()} />;\n}\n"]}